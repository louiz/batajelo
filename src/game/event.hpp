/** @addtogroup Game
 *  @{
 */

/**
 * Structures containing the information associated with a player event. For
 * example the MOVE event is associated with a list of entity IDs, and a
 * destination.  A SomethingEvent is an event that is sent from the client
 * to the server, indicating that the client wants to execute that event. A
 * DoSomethingEvent is a “corresponding” event from the server to the
 * clients telling the client to actually do that action; these actions are
 * ActionEvents, because they are associated with a turn.
 * @class Event
 */

#ifndef __EVENT_HPP__
# define __EVENT_HPP__

#include <serialization/serializable.hpp>
#include <world/entity.hpp>
#include <network/command.hpp>
#include <mpreal/mpreal.h>

class Event: public Serializable
{
public:
  Event(const unsigned long int id);
  Event(const Command*);
  Event();
  virtual ~Event() {}
  static unsigned long int current_id;
  virtual void serialize(boost::archive::text_oarchive& ar, const unsigned int)
  {
    ar & id;
  }
  virtual void serialize(boost::archive::text_iarchive& ar, const unsigned int)
  {
    ar & id;
  }

  unsigned long int get_id() const
  {
    return this->id;
  }
  bool is_valid() const
  {
    return this->valid;
  }

private:
  Event(const Event&);
  Event& operator=(const Event&);

protected:
  unsigned long int id;
  bool valid;
};

/**
 * Event used by the server to tell a client that the action (id)
 * has been validated by the client (client_id)
 */
class OkEvent: public Event
{
public:
  OkEvent(const unsigned int id,
	  const unsigned long int client_id):
    Event(id),
    client_id(client_id)
  {}
  OkEvent(const Command*);
  virtual void serialize(boost::archive::text_oarchive& ar, const unsigned int v)
  {
    Event::serialize(ar, v);
    ar & client_id;
  }
  virtual void serialize(boost::archive::text_iarchive& ar, const unsigned int v)
  {
    Event::serialize(ar, v);
    ar & client_id;
  }
  unsigned long int client_id;
};

/**
 * Just an event containing a turn number, saying that
 * the action generated by this event must be scheduled for this turn.
 */
class ActionEvent: public Event
{
public:
  ActionEvent(const std::string& name):
    Event(),
    name(name)
  {}
  ActionEvent(const Command*);

  virtual void serialize(boost::archive::text_oarchive& ar, const unsigned int v)
  {
    Event::serialize(ar, v);
    ar & turn;
  }
  virtual void serialize(boost::archive::text_iarchive& ar, const unsigned int v)
  {
    Event::serialize(ar, v);
    ar & turn;
  }
  unsigned long int turn;
  const std::string name;
private:
  ActionEvent(const ActionEvent&);
  ActionEvent& operator=(const ActionEvent&);
};

/**
 * An event containing an entity object.
 */
class DoEntityEvent: public ActionEvent
{
public:
  DoEntityEvent(Entity* entity):
    ActionEvent("NEW_ENTITY"),
    entity(entity)
  {}
  DoEntityEvent(const Command*);

  virtual void serialize(boost::archive::text_oarchive& ar, const unsigned int v)
  {
    ActionEvent::serialize(ar, v);
    ar & entity;
  }
  virtual void serialize(boost::archive::text_iarchive& ar, const unsigned int v)
  {
    ActionEvent::serialize(ar, v);
    ar & entity;
  }
  Entity* entity;

private:
  DoEntityEvent(const DoEntityEvent&);
  DoEntityEvent& operator=(const ActionEvent&);
};

class MoveEvent: public Event
{
public:
  MoveEvent(): Event() {}
  MoveEvent(const Command*);
  virtual void serialize(boost::archive::text_oarchive& ar, const unsigned int v)
  {
    Event::serialize(ar, v);
    ar & actors_ids & x & y;
  }
  virtual void serialize(boost::archive::text_iarchive& ar, const unsigned int v)
  {
    Event::serialize(ar, v);
    ar & actors_ids & x & y;
  }

  std::vector<unsigned short> actors_ids;
  uint x;
  uint y;

private:
  MoveEvent(const MoveEvent&);
  MoveEvent& operator=(const MoveEvent&);
};

class DoMoveEvent: public ActionEvent
{
public:
  DoMoveEvent():
    ActionEvent("PATH")
  {}

  virtual void serialize(boost::archive::text_oarchive& ar, const unsigned int v)
  {
    ActionEvent::serialize(ar, v);
    ar & actors_ids & x & y;
  }
  virtual void serialize(boost::archive::text_iarchive& ar, const unsigned int v)
  {
    ActionEvent::serialize(ar, v);
    ar & actors_ids & x & y;
  }

  DoMoveEvent(const Command*);
  DoMoveEvent(const MoveEvent& e):
    ActionEvent("PATH"),
    actors_ids(e.actors_ids),
    x(e.x),
    y(e.y)
  {}
  std::vector<unsigned short> actors_ids;
  uint x;
  uint y;
};

#endif // __EVENT_HPP__
/**@}*/
