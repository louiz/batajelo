/** @addtogroup Network
 *  @{
 */

/**
 * The server running one game. It keeps one world representation, receives
 * command from various clients and sends back commands to execute, in the
 * futur, to concerned clients, and execute them later using the TurnHandler
 * class.
 * @class GameServer
 */

#ifndef __GAME_SERVER_HPP__
# define __GAME_SERVER_HPP__

#include <game/remote_game_client.hpp>
#include <game/occupants_handler.hpp>
#include <network/server.hpp>
#include <world/world.hpp>
#include <mod/mod.hpp>

class GameServer: public Server<RemoteGameClient>
{
public:
  GameServer(short port, Mod& mod);
  ~GameServer();
  World* get_world();

  virtual void on_new_client(RemoteGameClient*) override final;
  virtual void on_client_left(RemoteGameClient*) override final;
  /**
   * Send the complete content of the replay contained in the World
   * to the client.
   */
  void send_replay(RemoteGameClient*);
  /**
   * Send a start command to the client telling it to start
   * confirming turns and actions from there.
   */
  void send_start_command(RemoteGameClient*);
  /**
   * Take all futur actions in the turn_handler, if they are not
   * completely validated yet, change their validations_needed value
   * to the current number of occupants, and send them to the client.
   */
  void send_and_adjust_future_commands(RemoteGameClient*);

  void adjust_and_revalidate_futur_commands();
  /**
   * Send a command to all clients saying that the action with this id
   * has been validated by all clients.
   */
  void send_ok(const unsigned int id, const unsigned long int by);
  /**
   * Send a command to all clients saying that the turn with this id
   * has been validated by all clients.
   */
  void send_turn(const unsigned int id, const unsigned long int by);

  void tick();
  void pause_game();
  void unpause_game();
  void start_game();
  void send_command_to_all(const char* name, const std::string& data);

  /**
   * This will create the initial game
   * state.
   * The iniatial state is generated by associating some actions with the
   * turn number 1.
   * When a new occupant joins (even if the game is not started) it will
   * receive these commands as part of the "replay". If the game is not yet
   * started, the replay is only one turn long.
   * If a player joins later (the game is started), it will still receive
   * the actions associated with the first turn, plus the subsequent game
   * actions.
   */
  void init();
  /**
   * Called whenever we receive a MOVE command from one client.
   * We try to generate a path, if the move is valid, and then
   * send that path action to all clients.
   */
  void move_callback(Command*);
  /**
   * Called whenever we receive a BUILD command from one client.
   * Check if the position is valid and the building can be built (money, the unit actually has this ability, etc).
   */
  void build_callback(Command*);
  /**
   * Called whenever we receive a SPAWN command from one client.  Should
   * check if that unit can actually do that (money, capacity to do it,
   * etc), before returning a DoSpawnEvent.
   */
  void spawn_callback(Command*);
  bool validate_action(const unsigned int id, const unsigned long int by);
  bool validate_turn(const unsigned int id, const unsigned long int by);
  /**
   * Generate a unit of the given type, at the given position and adds the
   * event of its creation to the first turn of the replay (which will be
   * sent to any joining client).
   */
  void spawn_unit(const size_t, const int, const int);

private:
  GameServer(const GameServer&);
  GameServer& operator=(const GameServer&);
  /**
   * The state of the world, synchronized through commands with the world
   * kept by each remote client.
   */
  World world;
  /**
   * the list of other occupants of the game, when a new client connects to
   * the server, we add it to the list, when it disconnects we remove it.
   * Each occupant object contains an id corresponding to the
   * RemoteGameClient object stored in the server.
   */
  OccupantsHandler occupants;
};

#endif // __GAME_SERVER_HPP__
/**#@}*/
